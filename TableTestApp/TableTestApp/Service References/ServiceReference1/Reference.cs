//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace TableTestApp.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TableEntity", Namespace="http://schemas.datacontract.org/2004/07/Microsoft.WindowsAzure.Storage.Table")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(TableTestApp.ServiceReference1.CDS))]
    public partial class TableEntity : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ETagField;
        
        private string PartitionKeyField;
        
        private string RowKeyField;
        
        private System.DateTimeOffset TimestampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ETag {
            get {
                return this.ETagField;
            }
            set {
                if ((object.ReferenceEquals(this.ETagField, value) != true)) {
                    this.ETagField = value;
                    this.RaisePropertyChanged("ETag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PartitionKey {
            get {
                return this.PartitionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PartitionKeyField, value) != true)) {
                    this.PartitionKeyField = value;
                    this.RaisePropertyChanged("PartitionKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RowKey {
            get {
                return this.RowKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RowKeyField, value) != true)) {
                    this.RowKeyField = value;
                    this.RaisePropertyChanged("RowKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTimeOffset Timestamp {
            get {
                return this.TimestampField;
            }
            set {
                if ((this.TimestampField.Equals(value) != true)) {
                    this.TimestampField = value;
                    this.RaisePropertyChanged("Timestamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CDS", Namespace="http://schemas.datacontract.org/2004/07/WCFServiceWebRole1")]
    public partial class CDS : TableTestApp.ServiceReference1.TableEntity {
        
        private string ArtistField;
        
        private string TitleField;
        
        private string YearField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Artist {
            get {
                return this.ArtistField;
            }
            set {
                if ((object.ReferenceEquals(this.ArtistField, value) != true)) {
                    this.ArtistField = value;
                    this.RaisePropertyChanged("Artist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Year {
            get {
                return this.YearField;
            }
            set {
                if ((object.ReferenceEquals(this.YearField, value) != true)) {
                    this.YearField = value;
                    this.RaisePropertyChanged("Year");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/addCD", ReplyAction="http://tempuri.org/IService1/addCDResponse")]
        System.IAsyncResult BeginaddCD(string rowkey, string artist, string title, string year, System.AsyncCallback callback, object asyncState);
        
        void EndaddCD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getCD", ReplyAction="http://tempuri.org/IService1/getCDResponse")]
        System.IAsyncResult BegingetCD(string rowkey, System.AsyncCallback callback, object asyncState);
        
        TableTestApp.ServiceReference1.CDS EndgetCD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/deleteCD", ReplyAction="http://tempuri.org/IService1/deleteCDResponse")]
        System.IAsyncResult BegindeleteCD(string rowkey, System.AsyncCallback callback, object asyncState);
        
        TableTestApp.ServiceReference1.CDS EnddeleteCD(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : TableTestApp.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TableTestApp.ServiceReference1.CDS Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TableTestApp.ServiceReference1.CDS)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteCDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteCDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public TableTestApp.ServiceReference1.CDS Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((TableTestApp.ServiceReference1.CDS)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<TableTestApp.ServiceReference1.IService1>, TableTestApp.ServiceReference1.IService1 {
        
        private BeginOperationDelegate onBeginaddCDDelegate;
        
        private EndOperationDelegate onEndaddCDDelegate;
        
        private System.Threading.SendOrPostCallback onaddCDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCDDelegate;
        
        private EndOperationDelegate onEndgetCDDelegate;
        
        private System.Threading.SendOrPostCallback ongetCDCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteCDDelegate;
        
        private EndOperationDelegate onEnddeleteCDDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteCDCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> addCDCompleted;
        
        public event System.EventHandler<getCDCompletedEventArgs> getCDCompleted;
        
        public event System.EventHandler<deleteCDCompletedEventArgs> deleteCDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TableTestApp.ServiceReference1.IService1.BeginaddCD(string rowkey, string artist, string title, string year, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddCD(rowkey, artist, title, year, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void TableTestApp.ServiceReference1.IService1.EndaddCD(System.IAsyncResult result) {
            base.Channel.EndaddCD(result);
        }
        
        private System.IAsyncResult OnBeginaddCD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rowkey = ((string)(inValues[0]));
            string artist = ((string)(inValues[1]));
            string title = ((string)(inValues[2]));
            string year = ((string)(inValues[3]));
            return ((TableTestApp.ServiceReference1.IService1)(this)).BeginaddCD(rowkey, artist, title, year, callback, asyncState);
        }
        
        private object[] OnEndaddCD(System.IAsyncResult result) {
            ((TableTestApp.ServiceReference1.IService1)(this)).EndaddCD(result);
            return null;
        }
        
        private void OnaddCDCompleted(object state) {
            if ((this.addCDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addCDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addCDAsync(string rowkey, string artist, string title, string year) {
            this.addCDAsync(rowkey, artist, title, year, null);
        }
        
        public void addCDAsync(string rowkey, string artist, string title, string year, object userState) {
            if ((this.onBeginaddCDDelegate == null)) {
                this.onBeginaddCDDelegate = new BeginOperationDelegate(this.OnBeginaddCD);
            }
            if ((this.onEndaddCDDelegate == null)) {
                this.onEndaddCDDelegate = new EndOperationDelegate(this.OnEndaddCD);
            }
            if ((this.onaddCDCompletedDelegate == null)) {
                this.onaddCDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddCDCompleted);
            }
            base.InvokeAsync(this.onBeginaddCDDelegate, new object[] {
                        rowkey,
                        artist,
                        title,
                        year}, this.onEndaddCDDelegate, this.onaddCDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TableTestApp.ServiceReference1.IService1.BegingetCD(string rowkey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCD(rowkey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TableTestApp.ServiceReference1.CDS TableTestApp.ServiceReference1.IService1.EndgetCD(System.IAsyncResult result) {
            return base.Channel.EndgetCD(result);
        }
        
        private System.IAsyncResult OnBegingetCD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rowkey = ((string)(inValues[0]));
            return ((TableTestApp.ServiceReference1.IService1)(this)).BegingetCD(rowkey, callback, asyncState);
        }
        
        private object[] OnEndgetCD(System.IAsyncResult result) {
            TableTestApp.ServiceReference1.CDS retVal = ((TableTestApp.ServiceReference1.IService1)(this)).EndgetCD(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCDCompleted(object state) {
            if ((this.getCDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCDCompleted(this, new getCDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCDAsync(string rowkey) {
            this.getCDAsync(rowkey, null);
        }
        
        public void getCDAsync(string rowkey, object userState) {
            if ((this.onBegingetCDDelegate == null)) {
                this.onBegingetCDDelegate = new BeginOperationDelegate(this.OnBegingetCD);
            }
            if ((this.onEndgetCDDelegate == null)) {
                this.onEndgetCDDelegate = new EndOperationDelegate(this.OnEndgetCD);
            }
            if ((this.ongetCDCompletedDelegate == null)) {
                this.ongetCDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCDCompleted);
            }
            base.InvokeAsync(this.onBegingetCDDelegate, new object[] {
                        rowkey}, this.onEndgetCDDelegate, this.ongetCDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult TableTestApp.ServiceReference1.IService1.BegindeleteCD(string rowkey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteCD(rowkey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        TableTestApp.ServiceReference1.CDS TableTestApp.ServiceReference1.IService1.EnddeleteCD(System.IAsyncResult result) {
            return base.Channel.EnddeleteCD(result);
        }
        
        private System.IAsyncResult OnBegindeleteCD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string rowkey = ((string)(inValues[0]));
            return ((TableTestApp.ServiceReference1.IService1)(this)).BegindeleteCD(rowkey, callback, asyncState);
        }
        
        private object[] OnEnddeleteCD(System.IAsyncResult result) {
            TableTestApp.ServiceReference1.CDS retVal = ((TableTestApp.ServiceReference1.IService1)(this)).EnddeleteCD(result);
            return new object[] {
                    retVal};
        }
        
        private void OndeleteCDCompleted(object state) {
            if ((this.deleteCDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteCDCompleted(this, new deleteCDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteCDAsync(string rowkey) {
            this.deleteCDAsync(rowkey, null);
        }
        
        public void deleteCDAsync(string rowkey, object userState) {
            if ((this.onBegindeleteCDDelegate == null)) {
                this.onBegindeleteCDDelegate = new BeginOperationDelegate(this.OnBegindeleteCD);
            }
            if ((this.onEnddeleteCDDelegate == null)) {
                this.onEnddeleteCDDelegate = new EndOperationDelegate(this.OnEnddeleteCD);
            }
            if ((this.ondeleteCDCompletedDelegate == null)) {
                this.ondeleteCDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteCDCompleted);
            }
            base.InvokeAsync(this.onBegindeleteCDDelegate, new object[] {
                        rowkey}, this.onEnddeleteCDDelegate, this.ondeleteCDCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override TableTestApp.ServiceReference1.IService1 CreateChannel() {
            return new Service1ClientChannel(this);
        }
        
        private class Service1ClientChannel : ChannelBase<TableTestApp.ServiceReference1.IService1>, TableTestApp.ServiceReference1.IService1 {
            
            public Service1ClientChannel(System.ServiceModel.ClientBase<TableTestApp.ServiceReference1.IService1> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginaddCD(string rowkey, string artist, string title, string year, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = rowkey;
                _args[1] = artist;
                _args[2] = title;
                _args[3] = year;
                System.IAsyncResult _result = base.BeginInvoke("addCD", _args, callback, asyncState);
                return _result;
            }
            
            public void EndaddCD(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("addCD", _args, result);
            }
            
            public System.IAsyncResult BegingetCD(string rowkey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rowkey;
                System.IAsyncResult _result = base.BeginInvoke("getCD", _args, callback, asyncState);
                return _result;
            }
            
            public TableTestApp.ServiceReference1.CDS EndgetCD(System.IAsyncResult result) {
                object[] _args = new object[0];
                TableTestApp.ServiceReference1.CDS _result = ((TableTestApp.ServiceReference1.CDS)(base.EndInvoke("getCD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegindeleteCD(string rowkey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = rowkey;
                System.IAsyncResult _result = base.BeginInvoke("deleteCD", _args, callback, asyncState);
                return _result;
            }
            
            public TableTestApp.ServiceReference1.CDS EnddeleteCD(System.IAsyncResult result) {
                object[] _args = new object[0];
                TableTestApp.ServiceReference1.CDS _result = ((TableTestApp.ServiceReference1.CDS)(base.EndInvoke("deleteCD", _args, result)));
                return _result;
            }
        }
    }
}
